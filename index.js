var child_process = require("child_process");
var http = require("http");
var Promise = require("bluebird");
var async = require("async");
module.exports = function (obj) {
    var response = {};
    var tests = [];
    var kernelserverFn = function (callback) {
        console.log("server");
        var callbacked = false;
        var timo = setTimeout(function () {
            if (!callbacked) {
                response.ip = "none";
                response.server = false;
                callback(new Error("no response from server"));
            }
        }, 10000);
        http.get("http://ingecotech.com:9090/ip", function (res) {
            res.setEncoding('utf8');
            res.on("data", function (body) {
                if (body && JSON.parse(body) && JSON.parse(body).ip) {
                    response.server = true;
                    response.ip = JSON.parse(body).ip;
                }
                else {
                    response.server = false;
                    response.ip = "none";
                }
            });
            res.on('end', function () {
                callbacked = true;
                clearTimeout(timo);
                callback();
            });
        }).on('error', function (e) {
            callbacked = true;
            clearTimeout(timo);
            response.server = false;
            response.ip = "none";
            callback(new Error(e));
        });
    };
    var googleFn = function (callback) {
        console.log("get");
        var callbacked = false;
        var timo = setTimeout(function () {
            if (!callbacked) {
                response.get = false;
                callback(new Error("no response from google"));
            }
        }, 10000);
        http.get("http://www.google.com/index.html", function () {
            callbacked = true;
            clearTimeout(timo);
            response.get = true;
            callback();
        }).on('error', function (e) {
            callbacked = true;
            clearTimeout(timo);
            response.get = false;
            callback(new Error(e));
        });
    };
    var pingFn = function (callback) {
        var callbacked = false;
        var timo = setTimeout(function () {
            if (!callbacked) {
                response.ping = false;
                callback(new Error("no ping"));
            }
        }, 10000);
        console.log("ping");
        child_process.exec(__dirname + "/ping.sh", { timeout: 10000 }, function (error, stdout, stderr) {
            if (error != null) {
                callbacked = true;
                clearTimeout(timo);
                response.ping = false;
                callback(new Error(error + ""));
            }
            else if (stderr && stderr != null) {
                callbacked = true;
                clearTimeout(timo);
                response.ping = false;
                callback(new Error(stderr + ""));
            }
            else {
                callbacked = true;
                clearTimeout(timo);
                response.ping = true;
                callback();
            }
        });
    };
    if (!obj) {
        tests.push(pingFn, googleFn, kernelserverFn);
    }
    else {
        if (obj.ping) {
            tests.push(pingFn);
        }
        if (obj.get) {
            tests.push(googleFn);
        }
        if (obj.server) {
            if (obj.server == true) {
                tests.push(kernelserverFn);
            }
            else {
                var serverFn = function (callback) {
                    var callbacked = false;
                    var timo = setTimeout(function () {
                        if (!callbacked) {
                            response.ip = "none";
                            response.server = false;
                            callback(new Error("no response"));
                        }
                    }, 10000);
                    http.get(obj.server, function (res) {
                        callbacked = true;
                        clearTimeout(timo);
                        response.server = true;
                        callback();
                    }).on('error', function (e) {
                        callbacked = true;
                        clearTimeout(timo);
                        response.server = false;
                        callback(new Error(e));
                    });
                };
                tests.push(serverFn);
            }
        }
        ;
    }
    return new Promise(function (resolve, reject) {
        async.series(tests, function (err, results) {
            if (err) {
                reject(response);
            }
            else {
                resolve(response);
            }
        });
    });
};

//# sourceMappingURL=data:application/json;base64,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Q0FBQyxDQUFDO2dCQUNQLENBQUMsQ0FBQztnQkFDRixLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQ3hCLENBQUM7UUFDTCxDQUFDO1FBQUEsQ0FBQztJQUNOLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsVUFBUyxPQUFPLEVBQUUsTUFBTTtRQUN2QyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFFZCxVQUFTLEdBQUcsRUFBRSxPQUFPO1lBRWpCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQ3BCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDckIsQ0FBQztRQUdMLENBQUMsQ0FBQyxDQUFDO0lBRVgsQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjaGlsZF9wcm9jZXNzIGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XG5pbXBvcnQgKiBhcyBodHRwIGZyb20gXCJodHRwXCI7XG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gXCJibHVlYmlyZFwiO1xuaW1wb3J0ICogYXMgYXN5bmMgZnJvbSBcImFzeW5jXCI7XG5cblxuZXhwb3J0ID1mdW5jdGlvbihvYmo6IHsgc2VydmVyOiBhbnksIHBpbmc6IGJvb2xlYW4sIGdldDogYm9vbGVhbiB9KSB7XG5cblxuICAgIGxldCByZXNwb25zZTogeyBwaW5nPzogYm9vbGVhbiwgZ2V0PzogYm9vbGVhbiwgc2VydmVyPzogYm9vbGVhbiwgaXA/OiBzdHJpbmcgfSA9IHt9O1xuICAgIGxldCB0ZXN0cyA9IFtdO1xuICAgIGxldCBrZXJuZWxzZXJ2ZXJGbiA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwic2VydmVyXCIpXG5cbiAgICAgICAgbGV0IGNhbGxiYWNrZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IHRpbW8gPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCFjYWxsYmFja2VkKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuaXAgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICByZXNwb25zZS5zZXJ2ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoXCJubyByZXNwb25zZSBmcm9tIHNlcnZlclwiKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMTAwMDApXG5cbiAgICAgICAgaHR0cC5nZXQoXCJodHRwOi8vaW5nZWNvdGVjaC5jb206OTA5MC9pcFwiLCBmdW5jdGlvbihyZXMpIHtcblxuICAgICAgICAgICAgcmVzLnNldEVuY29kaW5nKCd1dGY4Jyk7XG5cbiAgICAgICAgICAgIHJlcy5vbihcImRhdGFcIiwgZnVuY3Rpb24oYm9keSkge1xuICAgICAgICAgICAgICAgIGlmIChib2R5ICYmIEpTT04ucGFyc2UoYm9keSkgJiYgSlNPTi5wYXJzZShib2R5KS5pcCkge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5zZXJ2ZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5pcCA9IEpTT04ucGFyc2UoYm9keSkuaXA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2Uuc2VydmVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmlwID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXMub24oJ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1vKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpXG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgY2FsbGJhY2tlZCA9IHRydWU7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltbyk7XG4gICAgICAgICAgICByZXNwb25zZS5zZXJ2ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIHJlc3BvbnNlLmlwID0gXCJub25lXCI7XG4gICAgICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoZSkpXG4gICAgICAgIH0pO1xuXG5cblxuXG4gICAgfTtcblxuICAgIGxldCBnb29nbGVGbiA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZ2V0XCIpXG4gICAgICAgIGxldCBjYWxsYmFja2VkID0gZmFsc2U7XG4gICAgICAgIGxldCB0aW1vID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghY2FsbGJhY2tlZCkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmdldCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcihcIm5vIHJlc3BvbnNlIGZyb20gZ29vZ2xlXCIpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDAwMClcbiAgICAgICAgaHR0cC5nZXQoXCJodHRwOi8vd3d3Lmdvb2dsZS5jb20vaW5kZXguaHRtbFwiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBjb25zdW1lIHJlc3BvbnNlIGJvZHlcbiAgICAgICAgICAgIGNhbGxiYWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbW8pO1xuICAgICAgICAgICAgcmVzcG9uc2UuZ2V0ID0gdHJ1ZTtcblxuICAgICAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICB9KS5vbignZXJyb3InLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBjYWxsYmFja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1vKTtcbiAgICAgICAgICAgIHJlc3BvbnNlLmdldCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoZSkpXG4gICAgICAgIH0pO1xuXG5cbiAgICB9O1xuXG4gICAgbGV0IHBpbmdGbiA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIGxldCBjYWxsYmFja2VkID0gZmFsc2U7XG4gICAgICAgIGxldCB0aW1vID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghY2FsbGJhY2tlZCkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnBpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoXCJubyBwaW5nXCIpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDAwMClcbiAgICAgICAgY29uc29sZS5sb2coXCJwaW5nXCIpXG4gICAgICAgIGNoaWxkX3Byb2Nlc3MuZXhlYyhfX2Rpcm5hbWUgKyBcIi9waW5nLnNoXCIsIHsgdGltZW91dDogMTAwMDAgfSwgZnVuY3Rpb24oZXJyb3IsIHN0ZG91dCwgc3RkZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1vKTtcbiAgICAgICAgICAgICAgICByZXNwb25zZS5waW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKGVycm9yICsgXCJcIikpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0ZGVyciAmJiBzdGRlcnIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1vKTtcbiAgICAgICAgICAgICAgICByZXNwb25zZS5waW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKHN0ZGVyciArIFwiXCIpKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltbyk7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UucGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgfVxuXG5cbiAgICBpZiAoIW9iaikge1xuICAgICAgICB0ZXN0cy5wdXNoKHBpbmdGbiwgZ29vZ2xlRm4sIGtlcm5lbHNlcnZlckZuKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChvYmoucGluZykge1xuICAgICAgICAgICAgdGVzdHMucHVzaChwaW5nRm4pXG4gICAgICAgIH1cblxuICAgICAgICBpZiAob2JqLmdldCkge1xuICAgICAgICAgICAgdGVzdHMucHVzaChnb29nbGVGbilcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvYmouc2VydmVyKSB7XG4gICAgICAgICAgICBpZiAob2JqLnNlcnZlciA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdGVzdHMucHVzaChrZXJuZWxzZXJ2ZXJGbilcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlcnZlckZuID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgY2FsbGJhY2tlZCA9IGZhbHNlO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHRpbW8gPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYWxsYmFja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuaXAgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5zZXJ2ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoXCJubyByZXNwb25zZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwMDApXG5cbiAgICAgICAgICAgICAgICAgICAgaHR0cC5nZXQob2JqLnNlcnZlciwgZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1vKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnNlcnZlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgICAgICAgICAgICAgIH0pLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbW8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2Uuc2VydmVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoZSkpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGVzdHMucHVzaChzZXJ2ZXJGbilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGFzeW5jLnNlcmllcyh0ZXN0cyxcbiAgICAgICAgICAgIC8vIG9wdGlvbmFsIGNhbGxiYWNrXG4gICAgICAgICAgICBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcblxuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHRoZSByZXN1bHRzIGFycmF5IHdpbGwgZXF1YWwgWydvbmUnLCd0d28nXSBldmVuIHRob3VnaFxuICAgICAgICAgICAgICAgIC8vIHRoZSBzZWNvbmQgZnVuY3Rpb24gaGFkIGEgc2hvcnRlciB0aW1lb3V0LlxuICAgICAgICAgICAgfSk7XG5cbiAgICB9KVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
